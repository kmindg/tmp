/***************************************************************************
 *  Copyright (C)  EMC Corporation 1992-2010
 *  All rights reserved.
 *  Licensed material - property of EMC Corporation. 
 ***************************************************************************/

/***************************************************************************
 * ClbiLib_types.h
 ***************************************************************************
 *
 * File Description:
 *  Type definitions exported by CLBi library.
 * 
 * Author:
 *  Ashwin Tidke
 *  
 * Revision History:
 *  November 6 , 2008 - ART - Created Inital Version
 *  December 04, 2008 - ART - Added change for DIMS 214126
 *
 ***************************************************************************/

#ifndef __CLBI_LIB_TYPES_H_INCLUDE_
#define __CLBI_LIB_TYPES_H_INCLUDE_

#include "clb_errors.h"
#include "csx_ext.h" // required for CSX_MOD_IMPORT and CSX_MOD_EXPORT

#ifdef CLBI_EXPORT
#define CLBI_API CSX_MOD_EXPORT
#define CLBI_API_TYPEDEF CSX_TYPEDEF_EXPORT
#else
#define CLBI_API CSX_MOD_IMPORT
#define CLBI_API_TYPEDEF CSX_TYPEDEF_IMPORT
#endif

/* Zeus and onwards, Lockbox name is supposed to contain the owner name, the revision of 
 * CST standalone lockbox dll and an extension that will help NDU to identify 
 * that a PSM data area is a lockbox file (or its backup).
 * 
 * The names for lockbox and CST internal backup would be as follows:
 * <Client supplied lockbox name>_<CSP_LB_DLL_REVISION>.lkb
 * <Client supplied lockbox name>_<CSP_LB_DLL_REVISION>.lkb.bak
 *
 * Any changes to these have to be in sync with the NDU scripts that 
 * perform the lockbox copy/delete operations.
 * 
 * The maximum length of PSM data area name allowed is 48.
 * The name of owner of the lockbox is supposed to be a part of the client 
 * supplied name.
 * 4 characters are required for the extension ".bak" for the backup file 
 * generated by CST automatically for each lockbox.
 */
#define MAX_PSM_FILE_NAME_LENGTH    48
#define LB_EXTENSION                ".lkb"

// LB_FILE_EXTENSION_LENGTH defines the size of file extension in bytes.
// Both lock box file exntension .lkb as well as a backup file extension .bak
// are 4 bytes in length. Extension includes preceeding dot.
#define LB_FILE_EXTENSION_LENGTH    4

#define CSP_LB_DLL_REVISION_LENGTH  6
#define LB_BACKUP_EXTENSION         ".bak"
#define LB_UNDERSCORE_LENGTH        1

/* Maximum length supported for lockbox name. Includes the Null terminator.
 */
#define MAX_LB_NAME_LENGTH (MAX_PSM_FILE_NAME_LENGTH -          \
                            ((2 * LB_FILE_EXTENSION_LENGTH) +   \
                             CSP_LB_DLL_REVISION_LENGTH +       \
                             LB_UNDERSCORE_LENGTH))

/* Maximum length of identifier for a lockbox item. Includes the Null terminator.
 */
#define MAX_ITEM_NAME_LENGTH 256   

/* Maximum length of a lockbox item. Includes the Null terminator for text items.
 * CST Documentation recommends that a single item should not be more than 
 * 2KB in size. However, Navi needs to store a couple of items that may be
 * bigger than 20KB. Hence this is being currently set to 32KB on Navi's request.
 */
#define MAX_ITEM_LENGTH (32 * 1024)         

/*
 * CLBI_ITEM_TYPE:
 * Describes whether the item to be stored or retrieved from a lockbox is text 
 * encoded or binary encoded.
 * 
 *  CLBI_ITEM_TYPE_TEXT - Item is a Null terminated string.
 *  CLBI_ITEM_TYPE_BINARY - Item may contain Null characters.
 */
typedef enum __CLBI_ITEM_TYPE
{
    CLBI_ITEM_TYPE_TEXT,            
    CLBI_ITEM_TYPE_BINARY           
}CLBI_ITEM_TYPE;

/*
 * CLBI_OPERATION_TYPE:
 *  Used in ClbiStoreRemoveItems() to determine whether the user client wants to 
 *  store or remove a given lockbox item.
 * 
 *  CLBI_OPERATION_STORE - Item to be stored.
 *  CLBI_OPERATION_REMOVE - Item to be removed.
 */
typedef enum __CLBI_OPERATION_TYPE
{
    CLBI_OPERATION_STORE,           
    CLBI_OPERATION_REMOVE           
}CLBI_OPERATION_TYPE; 

/*
 * CLBI_ITEM:
 * Used in ClbiStoreRemoveItems()to find out the details about an item and the 
 * operation to be performed on it.
 * The function is provided with an array of these structures.
 * 
 *  ItemName:       Null terminated identifier for a lockbox item.
 *  OperationType:  Store or Remove?
 *  ItemType:       Text or Binary? Ignored for a remove operation.
 *  Item:           Pointer to buffer of item to be stored. Ignored for remove 
 *                  operation.
 *  ItemLen:        Length of item to be stored. Ignored for remove operation.
 */
typedef struct __CLBI_ITEM
{
    const char* ItemName;   
    CLBI_OPERATION_TYPE OperationType;      
    CLBI_ITEM_TYPE ItemType;                
    const unsigned char* Item;                  
    unsigned int ItemLen;                   
}CLBI_ITEM;

/*
 * Data type to be used for handle to an open lockbox
 */
typedef long lbHandle;

/*
 * Most of the common error codes that may be returned by Clbi APIs. 
 * These will be updated as and when the design completes.
 */
typedef enum __CLBI_STATUS
{
    CLBI_ERR_INVALID_SV = -20000,
    CLBI_TOC_BUNDLE_INDEX_ENTRY_NOT_FOUND,
    CLBI_ERR_SV_DA_EMPTY,
    CLBI_ERR_INSUFFICIENT_NUM_SV,
    CLBI_ERR_INVALID_INSTANCE_NAME,
    CLBI_ERR_COMMIT_REQUIRED,
    CLBI_ERR_FILE_NOT_FOUND,
    CLBI_ERR_SVDA_NOT_FOUND,
    CLBI_ERR_SVINDA_NOT_FOUND,
    CLBI_EXP_CREATE_DLS,
    CLBI_EXP_ACQUIRE_DLS,
    CLBI_EXP_PSM_OPEN,
    CLBI_EXP_PSM_READ,
    CLBI_EXP_PSM_WRITE,
    CLBI_ERR_GET_CSP_LB_REVISION,
    CLBI_ERR_AMS_CREATE_FAILURE,
    CLBI_ERR_LB_FILE_WRITE = CLB_ERR_FILE_WRITE,
    CLBI_ERR_LB_FILE_NOT_FOUND = CLB_ERR_LB_FILE_NOT_FOUND,
    CLBI_ERR_ITEM_NOT_FOUND = CLB_ERR_ENTRY_NOT_FOUND,
    CLBI_ERR_NOT_BIN_ENCODED = CLB_ERR_NOT_BIN_ENCODED,
    CLBI_ERR_NOT_TEXT_ENCODED = CLB_ERR_NOT_TEXT_ENCODED,
    CLBI_ERR_LB_RO = CLB_ERR_LB_RO,
    CLBI_ERR_LB_FILE_READ = CLB_ERR_LB_FILE_READ,
    CLBI_ERR_ALREADY_EXISTS = CLB_ERR_ALREADY_EXISTS,
    CLBI_ERR_INVALID_HANDLE = CLB_ERR_INVALID_HANDLE,
    CLBI_ERR_FILE_OPEN_FAILED = CLB_ERR_FILE_OPEN,
    CLBI_ERR_INVALID_PARAMETER = CLB_ERR_INVALID_ARGS,
    CLBI_ERR_MEMORY_ALLOC = CLB_ERR_MEMORY_ALLOC,
    CLBI_SUCCESS = NO_ERR
}CLBI_STATUS;

#endif