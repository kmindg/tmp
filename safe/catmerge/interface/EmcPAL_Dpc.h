#ifndef _EMCPAL_DPC_H_
#define _EMCPAL_DPC_H_

/*!
 * @file EmcPAL_Dpc.h
 * @addtogroup emcpal_callback_events
 * @{
 */
/**************************************************************************
 Copyright (C) EMC Corporation 2011
 All rights reserved.
 Licensed material -- property of EMC Corporation
 *************************************************************************/
/*!
 * File Name:
 *      EmcPAL_Dpc.h
 *
 * Contents:
 *     Header file for DPC Callback APIs
 *
 * Interface Functions:
 *
 * Revision
 *     02/22/2011  M. Hamel  Created
 *
 */


//++
// Include files
//--

#include "EmcPAL.h"

#ifdef __cplusplus
extern "C" {
#endif

/*! @brief EmcPal DPC callback proto */
typedef void EMCPAL_DPC_CALLBACK_PROTO (void *Context);
/*! @brief Pointer to EmcPal DPC callback proto */
typedef EMCPAL_DPC_CALLBACK_PROTO *PEMCPAL_DPC_CALLBACK_PROTO;

/*! @brief Object containing a DPC and related context. This structure should be considered opaque by users. */
typedef struct
{
    PEMCPAL_DPC_CALLBACK_PROTO Callback;		/*!< Ptr to callback */
    void *CallbackContext;						/*!< Callback context */
    unsigned char ProcessorNumber;				/*!< processor number */
#ifdef EMCPAL_USE_CSX_DPC
    csx_p_dpc_t Dpc;							/*!< DPC */
#else
    KDPC Dpc;									/*!< DPC */
#endif
} EMCPAL_DPC_OBJECT;

#ifdef EMCPAL_USE_CSX_DPC

/*! @brief EmcPal base DPC callback proto */
typedef void EMCPAL_DPC_BASE_CALLBACK_PROTO (csx_p_dpc_context_t Context);
/*! @brief Pointer to EmcPal base DPC callback proto */
typedef EMCPAL_DPC_BASE_CALLBACK_PROTO *PEMCPAL_DPC_BASE_CALLBACK_PROTO;

#ifndef ALAMOSA_WINDOWS_ENV
#if defined(UMODE_ENV) || defined(SIMMODE_ENV)
#define DPC_IMPERSONATE_THREAD_BEGIN
#define DPC_IMPERSONATE_THREAD_END
#else
#define DPC_IMPERSONATE_THREAD_BEGIN
#define DPC_IMPERSONATE_THREAD_END
#endif
#else
// Windows case, so nothing to do
#define DPC_IMPERSONATE_THREAD_BEGIN
#define DPC_IMPERSONATE_THREAD_END
#endif /* ALAMOSA_WINDOWS_ENV - ARCH - thread context differences */

#define EMCPAL_DECLARE_DPC_FUNC(EMCPAL_DPC_FN_NAME) \
    void EMCPAL_DPC_FN_NAME(csx_p_dpc_context_t Context);

#define EMCPAL_DEFINE_DPC_FUNC(EMCPAL_DPC_FN_NAME, EMCPAL_INTERNAL_DPC_FN_NAME) \
void EMCPAL_DPC_FN_NAME(csx_p_dpc_context_t Context) \
{ \
    EMCPAL_DPC_OBJECT *pDpcObject = (EMCPAL_DPC_OBJECT*)Context; \
    \
    DPC_IMPERSONATE_THREAD_BEGIN \
    \
    EMCPAL_INTERNAL_DPC_FN_NAME(pDpcObject->CallbackContext); \
    \
    DPC_IMPERSONATE_THREAD_END \
}

#else

/*! @brief EmcPal base DPC callback proto */
typedef void EMCPAL_DPC_BASE_CALLBACK_PROTO (PKDPC Dpc, void* Context, void* SystemArgument1, void* SystemArgument2);
/*! @brief Pointer to EmcPal base bDPC callback proto */
typedef EMCPAL_DPC_BASE_CALLBACK_PROTO *PEMCPAL_DPC_BASE_CALLBACK_PROTO;

#ifdef ALAMOSA_WINDOWS_ENV
#define DPC_IMPERSONATE_THREAD_BEGIN csx_p_dpc_impersonate_context_t CsxContext; \
csx_p_dpc_impersonate_begin(&CsxContext);

#define DPC_IMPERSONATE_THREAD_END csx_p_dpc_impersonate_end(&CsxContext);
#else
#define DPC_IMPERSONATE_THREAD_BEGIN
#define DPC_IMPERSONATE_THREAD_END
#endif /* ALAMOSA_WINDOWS_ENV - ARCH - thread context differences */

#define EMCPAL_DECLARE_DPC_FUNC(EMCPAL_DPC_FN_NAME) \
    void EMCPAL_DPC_FN_NAME(PKDPC Dpc, void* Context, void* SystemArgument1, void* SystemArgument2);
    
#define EMCPAL_DEFINE_DPC_FUNC(EMCPAL_DPC_FN_NAME, EMCPAL_INTERNAL_DPC_FN_NAME) \
void EMCPAL_DPC_FN_NAME(PKDPC Dpc, void* Context, void* SystemArgument1, void* SystemArgument2) \
{ \
    EMCPAL_DPC_OBJECT *pDpcObject = (EMCPAL_DPC_OBJECT*)Context; \
    \
    /* If the DPC uses CSX APIs, make sure it will have the correct thread-specific data */ \
    DPC_IMPERSONATE_THREAD_BEGIN \
    \
    EMCPAL_INTERNAL_DPC_FN_NAME(pDpcObject->CallbackContext); \
    \
    DPC_IMPERSONATE_THREAD_END \
}
#endif

/*! @brief This function is used to create a Dpc.
 *        Caller must later clean up by calling EmcpalDpcDestroy() when the Dpc is no longer being used, before unloading their module.
 *  @param pPalClient Contains CSX module context
 *  @param pDpcObject Pointer to a DpcObject structure allocated and partially filled in by caller - see EmcPAL_Dpc.h
 *  @param BaseCallback Base callback function for DPC.  This is the autogenerated function that will set context and call
 *                      the Callback function.
 *  @param Callback Client callback function.  This is called by BaseCallback.
 *  @param CallbackContext Context that will be passed back to Callback function.
 *  @param DpcNameString Name of DPC stored in CSX.     
 *  @return void
 */
EMCPAL_API void EmcpalDpcCreate(PEMCPAL_CLIENT pPalClient,
                                EMCPAL_DPC_OBJECT *pDpcObject,
                                EMCPAL_DPC_BASE_CALLBACK_PROTO BaseCallback,
                                EMCPAL_DPC_CALLBACK_PROTO Callback,
                                void *CallbackContext,
                                char *DpcNameString);

/*! @brief This function is called to cause a Dpc to be executed.
 *  @param pDpcObject Pointer to a DpcObject structure
 *  @return void
 */
EMCPAL_API void EmcpalDpcExecute(EMCPAL_DPC_OBJECT *pDpcObject);

/*! @brief This function is called to cause to destroy a Dpc previously created
 *         by calling EmcpalDpcCreate(). Caller is responsible for freeing the
 *         the EMCPAL_DPC_OBJECT (if desired) after this function returns.
 *  @param pDpcObject Pointer to a DpcObject structure
 *  @return void
 */
EMCPAL_API void EmcpalDpcDestroy(EMCPAL_DPC_OBJECT *pDpcObject);

/*! @brief This function is called to pin a DPC to a specific processor.
 *  @remark This function is supported only in Windows environments and 
 *          may be deprecated in the future. This function is being added
 *          purely to remove references to KeSetTargetProcessorDpc from 
 *          the rest of the code base.
 *  @param pDpcObject Pointer to a DpcObject structure
 *  @param ProcessorNumber Number of the processor that this DPC will always run on
 *  @return void
 */
EMCPAL_API void EmcpalDpcSetProcessor(EMCPAL_DPC_OBJECT *pDpcObject,
									  unsigned char ProcessorNumber);

#ifdef __cplusplus
}
#endif

/*!
 *	@} end group emcpal_callback_events
 *  @} .End file EmcPAL_Dpc.h
 */


#endif /*  _EMCPAL_DPC_H_ */


