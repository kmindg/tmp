#if !defined(TRC_ENVIRON_H)
#define TRC_ENVIRON_H
/* copyright statement */

#include "csx_ext.h"

/*****MASTER SWITCH*****/
#define TRC_DEVELOP 1
/*****MASTER SWITCH*****/

/*
 * trc_environ.h
 *
 * DESCRIPTION: This header file contains definitions of preprocessor
 *   symbols that are used to control the compile-time and run-time
 *   activity of TRC* facilities.
 */

/*
 * CONDITIONALS
 *
 * GEN_DATA        Controls whether an external reference or a definition is
 *                 generated by the m_fgen and TRC_tgen macros.
 *    defined   -- generate a definition
 *   !defined   -- generate an external reference
 *
 * TRC_<comp>_ACTIVE
 *
 * TRC_<comp>_FLAG
 *
 * TRC_BUFFER_SIZE Specifies the size of the sprintf buffer used with
 *                 TRC_printf() in user mode.
 *   !defined   -- defined as 1024
 *    defined   -- value used as number of elements in TRC_buffer array.
 *
 * TRC_COMP     -- name of current component
 *
 * TRC_COMP_<comp>  -- generating data for this component
 *
 * TRC_DEVELOP     Controls tracing in a gross sense
 *   !defined   -- defined as 0
 *   0          -- do not generate development-only debugging code
 *   non-zero   --        generate development-only debugging code
 *
 * TRC_GROUP_<group_name> -- generating data for this group
 *
 * TRC_SPAN_FRU_MIN Controls default minimum fru of interest value
 *    defined   -- use defined value
 *   !defined   -- use internal default 2
 *
 * TRC_SPAN_FRU_MAX Controls default maximum fru of interest value
 *    defined   -- use defined value
 *   !defined   -- use internal default 1
 *
 * UMODE_ENV       Controls user/kernel mode specific code
 *    defined   -- user mode  *   !defined   -- kernel mode
 */
#if !defined(TRC_BUFFER_SIZE)
#define      TRC_BUFFER_SIZE 1024
#endif
#if !defined(TRC_DEVELOP)
#define      TRC_DEVELOP 0
#endif
#if !defined(TRC_SPAN_FRU_MIN)
#define      TRC_SPAN_FRU_MIN 2
#endif
#if !defined(TRC_SPAN_FRU_MAX)
#define      TRC_SPAN_FRU_MAX 1
#endif

/*
 * PREPROCESSOR SYMBOL CONSTANTS
 */
#define TRC_ARGS          0x00000001  /* display arguments */
#define TRC_ENTRY         0x00000002  /* display entry to functions */
#define TRC_ENVS          0x00000004  /* display env vars */
#define TRC_EXIT          0x00000008  /* display exit from functions */
#define TRC_STATE         0x00000010  /* display state changes */
#define TRC_STATE2        0x00000020  /* display state changes */
#define TRC_STATE4        0x00000040  /* display state changes */
#define TRC_STATE8        0x00000080  /* display state changes */
#define TRC_STATS         0x00000100  /* record statistics */
#define TRC_TRANS         0x00000200  /* display transactions */
#define TRC_SPAN_FRUS     0x00000400  /* display fru if between limits */
/*                        0x00000800     reserved */
#define TRC_LEVEL_INFO    0x00001000  /* generate if info level */
#define TRC_LEVEL_WARN    0x00002000  /* generate if warn level */
#define TRC_LEVEL_ERROR   0x00004000  /* generate if error level */
#define TRC_LEVEL_FATAL   0x00008000  /* generate if fatal level */
#define TRCR_ARGS         0x00010000  /* store arguments */
#define TRCR_ENTRY        0x00020000  /* store entry to functions */
/*                        0x00040000     reserved */
#define TRCR_EXIT         0x00080000  /* store exit from functions */
#define TRCR_STATE        0x00100000  /* store state changes */
#define TRCR_STATE2       0x00200000  /* store state changes */
#define TRCR_STATE4       0x00400000  /* store state changes */
#define TRCR_STATE8       0x00800000  /* store state changes */
#define TRCR_STATS        0x01000000  /* store statistics */
#define TRCR_TRANS        0x02000000  /* store transactions */
#define TRCR_SPAN_FRUS    0x04000000  /* store fru if between limits */
/*                        0x08000000     reserved */
#define TRCR_LEVEL_INFO   0x10000000  /* generate if info level */
#define TRCR_LEVEL_WARN   0x20000000  /* generate if warn level */
#define TRCR_LEVEL_ERROR  0x40000000  /* generate if error level */
#define TRCR_LEVEL_FATAL  0x80000000  /* generate if fatal level */
#define TRC_ALL           0xFFFFFFFF  /* mask covering everything */
typedef enum TRC_flag_enum
{
  TRC_args           = TRC_ARGS,            /* display arguments */
  TRC_entry          = TRC_ENTRY,           /* display entry to functions */
  TRC_envs           = TRC_ENVS,            /* display env vars */
  TRC_exit           = TRC_EXIT,            /* display exit from functions */
  TRC_state          = TRC_STATE,           /* display state changes */
  TRC_state2         = TRC_STATE2,          /* display state changes */
  TRC_state4         = TRC_STATE4,          /* display state changes */
  TRC_state8         = TRC_STATE8,          /* display state changes */
  TRC_stats          = TRC_STATS,           /* record statistics */
  TRC_trans          = TRC_TRANS,           /* display transactions */
  TRC_span_frus      = TRC_SPAN_FRUS,       /* display fru if between limits */
  TRC_level_info     = TRC_LEVEL_INFO,      /* generate if info level */
  TRC_level_warn     = TRC_LEVEL_WARN,      /* generate if warn level */
  TRC_level_error    = TRC_LEVEL_ERROR,     /* generate if error level */
  TRC_level_fatal    = TRC_LEVEL_FATAL,     /* generate if fatal level */
  TRCR_args          = TRCR_ARGS,           /* store arguments */
  TRCR_entry         = TRCR_ENTRY,          /* store entry to functions */
  TRCR_exit          = TRCR_EXIT,           /* store exit from functions */
  TRCR_state         = TRCR_STATE,          /* store state changes */
  TRCR_state2        = TRCR_STATE2,         /* store state changes */
  TRCR_state4        = TRCR_STATE4,         /* store state changes */
  TRCR_state8        = TRCR_STATE8,         /* store state changes */
  TRCR_stats         = TRCR_STATS,          /* store statistics */
  TRCR_trans         = TRCR_TRANS,          /* store transactions */
  TRCR_span_frus     = TRCR_SPAN_FRUS,      /* store fru if between limits */
  TRCR_level_info    = TRCR_LEVEL_INFO,     /* generate if info level */
  TRCR_level_warn    = TRCR_LEVEL_WARN,     /* generate if warn level */
  TRCR_level_error   = TRCR_LEVEL_ERROR,    /* generate if error level */
  TRCR_level_fatal   = TRCR_LEVEL_FATAL,    /* generate if fatal level */
  TRC_all            = TRC_ALL,             /* mask covering everything */
} TRC_flag_T;

typedef struct TRC_flag_pair_struct
{
    TRC_flag_T pattern;
    char       *meaning;
} TRC_bit_name_T;

#if defined(GEN_DATA) && defined(TRC_GEN_CONTROL)

#define STDBITS()							\
    BITGEN ( TRCR_args,          "store arguments" )			\
    BITGEN ( TRCR_entry,         "store entry to functions" )		\
    BITGEN ( TRCR_exit,          "store exit from functions" )		\
    BITGEN ( TRCR_level_error,   "generate if error level" )		\
    BITGEN ( TRCR_level_fatal,   "generate if fatal level" )		\
    BITGEN ( TRCR_level_info,    "generate if info level" )		\
    BITGEN ( TRCR_level_warn,    "generate if warn level" )		\
    BITGEN ( TRCR_span_frus,     "store fru if between limits" )	\
    BITGEN ( TRCR_state,         "store state changes" )		\
    BITGEN ( TRCR_state2,        "store state changes" )		\
    BITGEN ( TRCR_state4,        "store state changes" )		\
    BITGEN ( TRCR_state8,        "store state changes" )		\
    BITGEN ( TRCR_stats,         "store statistics" )			\
    BITGEN ( TRCR_trans,         "store transactions" )			\
    BITGEN ( TRC_args,           "display arguments" )			\
    BITGEN ( TRC_entry,          "display entry to functions" )		\
    BITGEN ( TRC_envs,           "display env vars" )			\
    BITGEN ( TRC_exit,           "display exit from functions" )	\
    BITGEN ( TRC_level_error,    "generate if error level" )		\
    BITGEN ( TRC_level_fatal,    "generate if fatal level" )		\
    BITGEN ( TRC_level_info,     "generate if info level" )		\
    BITGEN ( TRC_level_warn,     "generate if warn level" )		\
    BITGEN ( TRC_span_frus,      "display fru if between limits" )	\
    BITGEN ( TRC_state,          "display state changes" )		\
    BITGEN ( TRC_state2,         "display state changes" )		\
    BITGEN ( TRC_state4,         "display state changes" )		\
    BITGEN ( TRC_state8,         "display state changes" )		\
    BITGEN ( TRC_stats,          "record statistics" )			\
    BITGEN ( TRC_trans,          "display transactions" )		\
    BITGEN ( TRC_all,            "mask covering everything" )

#define BITGEN(m_bits, m_string) \
    static char str_##m_bits[] = m_string; 

#pragma data_seg ("TRC_TABLE$4strings")
STDBITS()

#undef BITGEN

#define BITGEN(m_bits, m_string) \
    { (TRC_flag_T)m_bits, str_##m_bits },

#pragma data_seg ("TRC_TABLE$2elements")

#ifndef ALAMOSA_WINDOWS_ENV
static TRC_bit_name_T CSX_MAYBE_UNUSED TRC_bit_names[] =
#else
extern TRC_bit_name_T TRC_bit_names[] =
#endif /* ALAMOSA_WINDOWS_ENV - ODDCASE - compiler quirks */
{
STDBITS()
};

#undef BITGEN
#undef STDBITS

#pragma data_seg (".data")
#endif /* defined(GEN_DATA) && defined(TRC_GEN_CONTROL) */

/*
 * MACRO DEFINITIONS
 */

/*
 * TRC_fgen()
 *
 * DESCRIPTION: This macro is used to generate a flag variable of type
 *   TRC_flag_T.  If GEN_DATA is defined, it generates a definition for
 *   the variable and initializes it.  If GEN_DATA is not defined, it
 *   generates an enternal reference to the variable.
 *
 * PARAMETERS:
 *   m_var  -- variable name
 *   m_val  -- initial value
 *
 * GLOBALS: none
 *
 * CALLS: nothing
 *
 * RETURN VALUES:
 *   generates either:
 *                      TRC_flag_T <m_var> = <m_val>
 *                 or:
 *                      extern TRC_flag_T <mvar>
 *
 * ERRORS: none detected.
 *
 * NOTES:
 *
 * HISTORY:
 *   23 Dec 1999 JFW -- initial version */

#if defined(GEN_DATA)
  #define TRC_fgen(m_var, m_val)        TRC_flag_T m_var = m_val
#else
  #define TRC_fgen(m_var, m_val) extern TRC_flag_T m_var
#endif /* defined(GEN_DATA) */

/*
 * TRC_tgen()
 *
 * DESCRIPTION: This macro is used to generate a variable of the specified
 *   type.  If GEN_DATA is defined, it generates a definition for the
 *   variable and initializes it.  If GEN_DATA is not defined, it
 *   generates an enternal reference to the variable.
 *
 * PARAMETERS:
 *   m_typ  -- type specification for the variable
 *   m_var  -- variable name
 *   m_val  -- initial value
 *
 * GLOBALS: none
 *
 * CALLS: nothing
 *
 * RETURN VALUES:
 *   generates either:
 *                      <m_type> <m_var> = <m_val>
 *                      extern <m_type> <mvar>
 *
 * ERRORS: none detected.
 *
 * NOTES:
 *
 * HISTORY:
 *   23 Dec 1999 JFW -- initial version */

#if defined(GEN_DATA)
  #define TRC_tgen(m_type, m_var, m_val)        m_type m_var = m_val
#else
  #define TRC_tgen(m_type, m_var, m_val) extern m_type m_var
#endif /* defined(GEN_DATA) */

typedef unsigned long FRU_T;          /* JFW remove when this is typdeffed in
                                 *  a reasonable central file */
#ifndef DUMMY_VALUE
#define DUMMY_VALUE 0xDEADBEEF
#endif

/*
 * FUNCTION PROTOTYPES
 */
void TRC_main_args_ (const char*      name_A,
                     const int        argc_A,
                     const char*      argv_A[],
                     const TRC_flag_T flag_A); /* trc_util.c */

void TRC_sprintf_   (char* format_A, ...) __attribute__((format(__printf_func__,1,2)));        /* trc_util.c */


/*
 * MISC GLOBAL DATA DECLARATION/DEFINITION
 */
//TRC_tgen (char, TRC_buffer[TRC_BUFFER_SIZE], {'\000'});
//TRC_tgen (FRU_T, TRC_span_fru_min, TRC_SPAN_FRU_MIN);
//TRC_tgen (FRU_T, TRC_span_fru_max, TRC_SPAN_FRU_MAX);
#define TRC_SPAN_FRU_ALWAYS -1
#endif /* !defined(TRC_ENVIRON_H) */ /* last line in file */
