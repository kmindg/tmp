#ifndef SATA_PHYSICAL_DRIVE_PRIVATE_H
#define SATA_PHYSICAL_DRIVE_PRIVATE_H

/**************************************************************************
*  
*  *****************************************************************
*  *** 2012_03_30 SATA DRIVES ARE FAULTED IF PLACED IN THE ARRAY ***
*  *****************************************************************
*      SATA drive support was added as black content to R30
*      but SATA drives were never supported for performance reasons.
*      The code has not been removed in the event that we wish to
*      re-address the use of SATA drives at some point in the future.
*
***************************************************************************/

#include "fbe/fbe_winddk.h"
#include "fbe/fbe_queue.h"
#include "fbe/fbe_transport.h"
#include "fbe/fbe_sata_interface.h"

#include "fbe_stp_transport.h"
#include "base_physical_drive_private.h"
#include "base_physical_drive_init.h"

extern fbe_lifecycle_const_t FBE_LIFECYCLE_CONST_DATA(sata_physical_drive);

/* All FBE timeouts in miliseconds */
enum fbe_sata_physical_drive_timeouts_e {
    FBE_SATA_PHYSICAL_DRIVE_DEFAULT_TIMEOUT = 5000, /* 5 sec */
    FBE_SATA_PHYSICAL_DRIVE_FW_DOWNLOAD_TIMEOUT = 60000, /* 60 sec */
    FBE_SATA_PHYSICAL_DRIVE_EXIT_STANDBY_TIMEOUT = 15000 /* 15 sec */

};

enum fbe_sata_physical_drive_constants_e {
    FBE_SATA_PHYSICAL_DRIVE_MAX_GET_INFO_RETRIES = 10
};

static fbe_u8_t CSX_MAYBE_UNUSED sata_drive_inscription_geminik_data_template []  = {
0x45, 0x4D, 0x43, 0x32, 0x53, 0x41, 0x54, 0x41,
0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x1C, 0x20,
0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
0x00, 0x00, 0x01, 0x0E, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x04, 0x00, 0x7C, 0x00, 0x00, 0x02, 0x41,
0x54, 0x41, 0x2D, 0x48, 0x54, 0x43, 0x48, 0x48,
0x55, 0x41, 0x37, 0x32, 0x31, 0x30, 0x31, 0x43,
0x4C, 0x41, 0x52, 0x31, 0x30, 0x30, 0x30, 0x4B,
0x36, 0x4C, 0x39, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x20, 0x20, 0x20, 0x20, 0x20,
0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x44,
0x47, 0x31, 0x31, 0x38, 0x30, 0x33, 0x32, 0x35,
0x37, 0x39, 0x00, 0x00, 0x30, 0x30, 0x35, 0x30,
0x34, 0x39, 0x30, 0x30, 0x36, 0x00, 0x00, 0x00,
0x53, 0x54, 0x33, 0x37, 0x35, 0x30, 0x36, 0x34,
0x30, 0x4E, 0x53, 0x20, 0x20, 0x20, 0x20, 0x20,
0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
0x42, 0x41, 0x4B, 0x36, 0x4C, 0x39, 0x20, 0x20,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

static fbe_u8_t CSX_MAYBE_UNUSED sata_drive_inscription_moose_data_template []  = {
0x45, 0x4D, 0x43, 0x32, 0x53, 0x41, 0x54, 0x41,
0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x1C, 0x20,
0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
0x00, 0x00, 0x01, 0x0E, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x04, 0x00, 0x7C, 0x00, 0x00, 0x02, 0x41,
0x54, 0x41, 0x2D, 0x53, 0x54, 0x00, 0x00, 0x53,
0x54, 0x33, 0x31, 0x30, 0x30, 0x30, 0x33, 0x43,
0x4C, 0x41, 0x52, 0x31, 0x30, 0x30, 0x30, 0x4B,
0x36, 0x4C, 0x39, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x20, 0x20, 0x20, 0x20, 0x20,
0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x44,
0x47, 0x31, 0x31, 0x38, 0x30, 0x33, 0x32, 0x35,
0x38, 0x39, 0x00, 0x00, 0x30, 0x30, 0x35, 0x30,
0x34, 0x39, 0x30, 0x36, 0x33, 0x00, 0x00, 0x00,
0x53, 0x54, 0x33, 0x37, 0x35, 0x30, 0x36, 0x34,
0x30, 0x4E, 0x53, 0x20, 0x20, 0x20, 0x20, 0x20,
0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
0x42, 0x41, 0x4B, 0x36, 0x4C, 0x39, 0x20, 0x20,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

static fbe_u8_t CSX_MAYBE_UNUSED sata_flash_drive_samsung_100gb_inscription_template []  = {
0x45, 0x4D, 0x43, 0x32, 0x53, 0x41, 0x54, 0x41,
0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x1C, 0x20,
0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
0x00, 0x00, 0x01, 0x0E, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x04, 0x00, 0x7C, 0x00, 0x00, 0x02, 0x53,
0x41, 0x4D, 0x53, 0x55, 0x4E, 0x47, 0x20, 0x53,
0x53, 0x31, 0x36, 0x30, 0x35, 0x31, 0x30, 0x20,
0x43, 0x4C, 0x41, 0x52, 0x31, 0x30, 0x30, 0x4B,
0x36, 0x4C, 0x39, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x20, 0x20, 0x20, 0x20, 0x20,
0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x44,
0x47, 0x31, 0x31, 0x38, 0x30, 0x33, 0x32, 0x37,
0x31, 0x33, 0x00, 0x00, 0x30, 0x30, 0x35, 0x30,
0x34, 0x39, 0x31, 0x36, 0x39, 0x00, 0x00, 0x00,
0x53, 0x54, 0x33, 0x37, 0x35, 0x30, 0x36, 0x34,
0x30, 0x4E, 0x53, 0x20, 0x20, 0x20, 0x20, 0x20,
0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
0x42, 0x41, 0x4B, 0x36, 0x4C, 0x39, 0x20, 0x20,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

static fbe_u8_t CSX_MAYBE_UNUSED sata_flash_drive_samsung_200gb_inscription_template []  = {
0x45, 0x4D, 0x43, 0x32, 0x53, 0x41, 0x54, 0x41,
0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x1C, 0x20,
0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
0x00, 0x00, 0x01, 0x0E, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x04, 0x00, 0x7C, 0x00, 0x00, 0x02, 0x53,
0x41, 0x4D, 0x53, 0x55, 0x4E, 0x47, 0x20, 0x53,
0x53, 0x31, 0x36, 0x30, 0x35, 0x31, 0x30, 0x20,
0x43, 0x4C, 0x41, 0x52, 0x32, 0x30, 0x30, 0x4B,
0x36, 0x4C, 0x39, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x20, 0x20, 0x20, 0x20, 0x20,
0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x44,
0x47, 0x31, 0x31, 0x38, 0x30, 0x33, 0x32, 0x37,
0x31, 0x34, 0x00, 0x00, 0x30, 0x30, 0x35, 0x30,
0x34, 0x39, 0x31, 0x37, 0x30, 0x00, 0x00, 0x00,
0x53, 0x54, 0x33, 0x37, 0x35, 0x30, 0x36, 0x34,
0x30, 0x4E, 0x53, 0x20, 0x20, 0x20, 0x20, 0x20,
0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
0x42, 0x41, 0x4B, 0x36, 0x4C, 0x39, 0x20, 0x20,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

/* These are the lifecycle condition ids for a sata physical drive object. */
typedef enum fbe_sata_physical_drive_lifecycle_cond_id_e {
    FBE_SATA_PHYSICAL_DRIVE_LIFECYCLE_COND_PROTOCOL_EDGE_DETACHED = FBE_LIFECYCLE_COND_FIRST_ID(FBE_CLASS_ID_SATA_PHYSICAL_DRIVE),
    FBE_SATA_PHYSICAL_DRIVE_LIFECYCLE_COND_PROTOCOL_EDGE_CLOSED,
    FBE_SATA_PHYSICAL_DRIVE_LIFECYCLE_COND_IDENTIFY_DEVICE,
    FBE_SATA_PHYSICAL_DRIVE_LIFECYCLE_COND_WRITE_INSCRIPTION,
    FBE_SATA_PHYSICAL_DRIVE_LIFECYCLE_COND_READ_INSCRIPTION,
    FBE_SATA_PHYSICAL_DRIVE_LIFECYCLE_COND_CHECK_POWER_MODE,
    FBE_SATA_PHYSICAL_DRIVE_LIFECYCLE_COND_EXECUTE_DEVICE_DIAG,
    FBE_SATA_PHYSICAL_DRIVE_LIFECYCLE_COND_READ_NATIVE_MAX_ADDRESS_EXT,
    FBE_SATA_PHYSICAL_DRIVE_LIFECYCLE_COND_FLUSH_WRITE_CACHE,
    FBE_SATA_PHYSICAL_DRIVE_LIFECYCLE_COND_DISABLE_WRITE_CACHE,
    FBE_SATA_PHYSICAL_DRIVE_LIFECYCLE_COND_ENABLE_RLA,
    FBE_SATA_PHYSICAL_DRIVE_LIFECYCLE_COND_SET_PIO_MODE,
    FBE_SATA_PHYSICAL_DRIVE_LIFECYCLE_COND_SET_UDMA_MODE,
    FBE_SATA_PHYSICAL_DRIVE_LIFECYCLE_COND_ENABLE_SMART,
    FBE_SATA_PHYSICAL_DRIVE_LIFECYCLE_COND_ENABLE_SMART_AUTOSAVE,
    FBE_SATA_PHYSICAL_DRIVE_LIFECYCLE_COND_SMART_RETURN_STATUS,
    FBE_SATA_PHYSICAL_DRIVE_LIFECYCLE_COND_SMART_READ_ATTRIBUTES,
    FBE_SATA_PHYSICAL_DRIVE_LIFECYCLE_COND_SCT_SET_READ_TIMER,
    FBE_SATA_PHYSICAL_DRIVE_LIFECYCLE_COND_SCT_SET_WRITE_TIMER,   
    FBE_SATA_PHYSICAL_DRIVE_LIFECYCLE_COND_READ_TEST,
    FBE_SATA_PHYSICAL_DRIVE_LIFECYCLE_COND_DETACH_STP_EDGE, /* Preset in destroy rotary */
    FBE_SATA_PHYSICAL_DRIVE_LIFECYCLE_COND_RETRY_GET_DEV_INFO,
    FBE_SATA_PHYSICAL_DRIVE_LIFECYCLE_COND_GET_SPINUP_CREDIT,
    FBE_SATA_PHYSICAL_DRIVE_LIFECYCLE_COND_RELEASE_SPINUP_CREDIT,
    FBE_SATA_PHYSICAL_DRIVE_LIFECYCLE_COND_RELEASE_SPINUP_CREDIT_TIMER,
    
FBE_SATA_PHYSICAL_DRIVE_LIFECYCLE_COND_LAST /* must be last */
} fbe_sata_physical_drive_lifecycle_cond_id_t;

#if 0
typedef enum fbe_sata_physical_drive_flags_e {
	FBE_SATA_PHYSICAL_DRIVE_FLAG_ENCL_A = 0x00000001, /*!< When set prevents the drive is connected to enclosure A, otherwise to enclosure B */
};
#endif

typedef fbe_u32_t fbe_sata_physical_drive_attributes_t;

typedef struct fbe_sata_physical_drive_info_block_s {

    fbe_u64_t   native_capacity;
    fbe_u8_t    serial_num[FBE_SCSI_INQUIRY_SERIAL_NUMBER_SIZE+1];
    fbe_u8_t    fw_rev[FBE_SATA_FIRMWARE_REVISION_SIZE + 1];
    fbe_u8_t    model_num[FBE_SATA_MODEL_NUMBER_SIZE + 1];
    fbe_u8_t    UDMAMode;
    fbe_u8_t    PIOMode;
    fbe_u32_t   drive_type; 
    fbe_bool_t  is_inscribed;
    fbe_bool_t  power_save_mode;
    fbe_u8_t    sct_support;

} fbe_sata_physical_drive_info_block_t;

typedef struct fbe_sata_physical_drive_s{
    fbe_base_physical_drive_t   base_physical_drive;

    fbe_stp_edge_t stp_edge;

	fbe_sata_physical_drive_attributes_t sata_physical_drive_attributes;

    fbe_sata_physical_drive_info_block_t sata_drive_info;

    fbe_u32_t get_dev_info_retry_count;

#if 0
	fbe_u32_t tag_bitfield; /*!< Used to keep track of allocated tags. Each tag represented by bit */
	fbe_u32_t max_queue_depth; /*!< This should be half of "maximum queue depth" reported by IDENTIFY DEVICE 75 */
	fbe_queue_head_t tag_queue_head; /*!< This will be used to enqueue "aborted" commands (formely known as abort queue) */
	fbe_spinlock_t   tag_lock; /*!< This will protect both tag_queue and tag_bitfiels */
#endif

    FBE_LIFECYCLE_DEF_INST_DATA;
    FBE_LIFECYCLE_DEF_INST_COND(FBE_LIFECYCLE_COND_MAX(FBE_SATA_PHYSICAL_DRIVE_LIFECYCLE_COND_LAST));
}fbe_sata_physical_drive_t;

typedef enum fbe_sata_drive_status_e{
    FBE_SATA_DRIVE_STATUS_OK                               = 0x0000,
    FBE_SATA_DRIVE_STATUS_PROG_IDENTIFY_NOT_SUPPORTED,
    FBE_SATA_DRIVE_STATUS_INVALID_INSCRIPTION,
    FBE_SATA_DRIVE_STATUS_DEVICE_NOT_PRESENT,
    FBE_SATA_DRIVE_STATUS_HARD_ERROR,
    FBE_SATA_DRIVE_STATUS_PIO_MODE_UNSUPPORTED,
    FBE_SATA_DRIVE_STATUS_UDMA_MODE_UNSUPPORTED,
    FBE_SATA_DRIVE_STATUS_INVALID,
    FBE_SATA_DRIVE_STATUS_NEED_RETRY,
    
    FBE_SATA_DRIVE_STATUS_LAST
}fbe_sata_drive_status_t;

/**********************************************************************
 *
 * Error Counters in the block io packet:
 *
 * This struct holds all the retry counters
 *
 *********************************************************************/

typedef struct fbe_sata_physical_drive_error_cnt_s
{
    fbe_u16_t dev_busy_retry_cnt;
    fbe_u16_t dev_reserved_retry_cnt;
    fbe_u16_t not_ready_retry_cnt;
    fbe_u16_t becoming_ready_retry_cnt;

    fbe_u16_t aborted_cmd_error_retry_cnt;
    fbe_u16_t gen_firmware_error_retry_cnt;
    fbe_u16_t hard_err_no_spare_retry_cnt;
    fbe_u16_t media_err_write_error_retry_cnt;

    fbe_u16_t dev_detected_error_retry_cnt;
    fbe_u16_t hardware_error_write_fault_retry_cnt;
    fbe_u16_t internal_target_failure_retry_cnt;
    fbe_u16_t scsi_timeout_retry_cnt;

    fbe_u16_t bus_reset_retry_cnt;
    fbe_u16_t scsi_protocol_retries;

    fbe_u16_t scsi_selection_retries;
    fbe_u16_t remaps_this_req_cnt;
    fbe_u16_t lba_this_req_cnt; 
    fbe_u16_t inv_req_retry_cnt;
    fbe_u16_t other_cnt;

    fbe_u16_t modify_disk_cache_retries;
  
    fbe_u16_t state;
    fbe_u16_t sub_state;
} fbe_sata_physical_drive_error_cnt_t;

/* Methods */
fbe_status_t fbe_sata_physical_drive_create_object(fbe_packet_t * packet, fbe_object_handle_t * object_handle);
fbe_status_t fbe_sata_physical_drive_destroy_object( fbe_object_handle_t object_handle);
fbe_status_t fbe_sata_physical_drive_control_entry(fbe_object_handle_t object_handle, fbe_packet_t * packet);
fbe_status_t fbe_sata_physical_drive_io_entry(fbe_object_handle_t object_handle, fbe_packet_t * packet);

fbe_status_t fbe_sata_physical_drive_event_entry(fbe_object_handle_t object_handle, fbe_event_type_t event_type, fbe_event_context_t event_context);

fbe_status_t fbe_sata_physical_drive_monitor_entry(fbe_object_handle_t object_handle, fbe_packet_t * packet);

fbe_status_t fbe_sata_physical_drive_monitor_load_verify(void);

fbe_status_t fbe_sata_physical_drive_init(fbe_sata_physical_drive_t * sata_physical_drive);

#if 0
/* Tag functions */
fbe_status_t fbe_sata_physical_drive_allocate_tag(fbe_sata_physical_drive_t * sata_physical_drive, fbe_u8_t * tag);
fbe_status_t fbe_sata_physical_drive_release_tag(fbe_sata_physical_drive_t * sata_physical_drive, fbe_u8_t tag);

fbe_status_t fbe_sata_physical_drive_set_max_queue_depth(fbe_sata_physical_drive_t * sata_physical_drive, fbe_u32_t max_queue_depth);
#endif

/* Usurper functions */
fbe_status_t fbe_sata_physical_drive_attach_stp_edge(fbe_sata_physical_drive_t * sata_physical_drive, fbe_packet_t * packet);
fbe_status_t fbe_sata_physical_drive_detach_stp_edge(fbe_sata_physical_drive_t * sata_physical_drive, fbe_packet_t * packet);
fbe_status_t fbe_sata_physical_drive_open_stp_edge(fbe_sata_physical_drive_t * sata_physical_drive, fbe_packet_t * packet);
fbe_status_t fbe_sata_physical_drive_get_smart_dump(fbe_sata_physical_drive_t * sata_physical_drive, fbe_packet_t * packet);

/* Executer functions */
fbe_status_t fbe_sata_physical_drive_identify_device(fbe_sata_physical_drive_t * sata_physical_drive, fbe_packet_t * packet);
fbe_status_t fbe_sata_physical_drive_read_native_max_address_ext(fbe_sata_physical_drive_t * sata_physical_drive, fbe_packet_t * packet);
fbe_status_t fbe_sata_physical_drive_read_test(fbe_sata_physical_drive_t * sata_physical_drive, fbe_packet_t * packet);
fbe_status_t fbe_sata_physical_drive_read_inscription(fbe_sata_physical_drive_t * sata_physical_drive, fbe_packet_t * packet);
fbe_status_t fbe_sata_physical_drive_write_inscription(fbe_sata_physical_drive_t * sata_physical_drive, fbe_packet_t * packet);
fbe_status_t fbe_sata_physical_drive_check_power_mode(fbe_sata_physical_drive_t * sata_physical_drive, fbe_packet_t * packet);
fbe_status_t fbe_sata_physical_drive_execute_device_diag(fbe_sata_physical_drive_t * sata_physical_drive, fbe_packet_t * packet);
fbe_status_t fbe_sata_physical_drive_flush_write_cache(fbe_sata_physical_drive_t * sata_physical_drive, fbe_packet_t * packet);
fbe_status_t fbe_sata_physical_drive_disable_write_cache(fbe_sata_physical_drive_t * sata_physical_drive, fbe_packet_t * packet);
fbe_status_t fbe_sata_physical_drive_enable_rla(fbe_sata_physical_drive_t * sata_physical_drive, fbe_packet_t * packet);
fbe_status_t fbe_sata_physical_drive_set_pio_mode(fbe_sata_physical_drive_t * sata_physical_drive, fbe_packet_t * packet);
fbe_status_t fbe_sata_physical_drive_set_udma_mode(fbe_sata_physical_drive_t * sata_physical_drive, fbe_packet_t * packet);
fbe_status_t fbe_sata_physical_drive_enable_smart(fbe_sata_physical_drive_t * sata_physical_drive, fbe_packet_t * packet);
fbe_status_t fbe_sata_physical_drive_enable_smart_autosave(fbe_sata_physical_drive_t * sata_physical_drive, fbe_packet_t * packet);
fbe_status_t fbe_sata_physical_drive_smart_return_status(fbe_sata_physical_drive_t * sata_physical_drive, fbe_packet_t * packet);
fbe_status_t fbe_sata_physical_drive_smart_read_attributes(fbe_sata_physical_drive_t * sata_physical_drive, fbe_packet_t * packet);
fbe_status_t fbe_sata_physical_drive_sct_set_read_timer(fbe_sata_physical_drive_t * sata_physical_drive, fbe_packet_t * packet);
fbe_status_t fbe_sata_physical_drive_sct_set_write_timer(fbe_sata_physical_drive_t * sata_physical_drive, fbe_packet_t * packet);
fbe_status_t fbe_sata_physical_drive_reset_device(fbe_sata_physical_drive_t * sata_physical_drive, fbe_packet_t * packet);
fbe_status_t fbe_sata_physical_drive_firmware_download(fbe_sata_physical_drive_t * sata_physical_drive, fbe_packet_t * packet);

fbe_status_t fbe_sata_physical_drive_handle_block_operation_error(fbe_payload_ex_t * payload, fbe_port_request_status_t request_status);

fbe_status_t fbe_sata_physical_drive_map_port_status_to_scsi_error_code(fbe_port_request_status_t request_status, fbe_scsi_error_code_t * error);
fbe_status_t fbe_sata_physical_drive_set_power_save(fbe_sata_physical_drive_t * sata_physical_drive, fbe_packet_t * packet, fbe_bool_t on);
fbe_status_t fbe_sata_physical_drive_spin_down(fbe_sata_physical_drive_t * sata_physical_drive, fbe_packet_t * packet);
fbe_status_t fbe_sata_physical_drive_write_uncorrectable(fbe_sata_physical_drive_t * sata_physical_drive, fbe_packet_t * packet, fbe_lba_t lba);

/* Block transport entry */
fbe_status_t fbe_sata_physical_drive_block_transport_entry(fbe_transport_entry_context_t context, fbe_packet_t * packet);

/* Util Functions*/
fbe_sata_drive_status_t fbe_sata_physical_drive_set_dev_info_from_inscription(fbe_sata_physical_drive_t * sata_physical_drive, 
                                                      fbe_u8_t *inquiry_data,
                                                      fbe_physical_drive_information_t * info_ptr);

fbe_sata_drive_status_t fbe_sata_physical_drive_parse_identify(fbe_sata_physical_drive_t * sata_physical_drive, 
                                       fbe_u8_t *identify_data,
                                       fbe_physical_drive_information_t * drive_info);

fbe_sata_drive_status_t fbe_sata_physical_drive_parse_inscription(fbe_sata_physical_drive_t * sata_physical_drive, 
                                                                  fbe_u8_t *inscription_data,
                                                                  fbe_physical_drive_information_t * drive_info);

fbe_sata_drive_status_t fbe_sata_physical_drive_parse_read_log_extended(fbe_sata_physical_drive_t * sata_physical_drive,
                                                                        fbe_payload_fis_operation_t * fis_operation,
                                                                        fbe_payload_ex_t * payload);


#endif /* SATA_PHYSICAL_DRIVE_PRIVATE_H */
